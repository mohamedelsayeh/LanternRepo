//
//  ShapeKit.swift
//  ShapeKit
//
//  Created by Mohamed Elsayeh on 3/15/17.
//  Copyright Â© 2017 MS. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class ShapeKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 108), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 108)


        //// Color Declarations
        let color2 = UIColor(red: 0.973, green: 0.973, blue: 0.973, alpha: 1.000)
        let color3 = UIColor(red: 0.906, green: 0.910, blue: 0.914, alpha: 1.000)
        let gradientColor = UIColor(red: 0.969, green: 0.973, blue: 0.976, alpha: 1.000)
        let gradientColor3 = UIColor(red: 0.969, green: 0.973, blue: 0.976, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor3.cgColor] as CFArray, locations: [0, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 240, height: 94))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 120, y: -0), end: CGPoint(x: 120, y: 94), options: [])
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 240, y: 94))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 94), controlPoint1: CGPoint(x: 240, y: 94), controlPoint2: CGPoint(x: 134, y: 122.12))
        color2.setFill()
        bezierPath.fill()
        color3.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 110, resizedFrame.height / 110)


        //// Color Declarations
        let color4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.050)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.15)
        shadow.shadowOffset = CGSize(width: -1, height: 1)
        shadow.shadowBlurRadius = 3

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 100, height: 100))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        color4.setFill()
        ovalPath.fill()
        context.restoreGState()

        color5.setStroke()
        ovalPath.lineWidth = 0.5
        ovalPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 110, resizedFrame.height / 110)


        //// Color Declarations
        let color4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color5 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.050)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.15)
        shadow.shadowOffset = CGSize(width: -1, height: 1)
        shadow.shadowBlurRadius = 3

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 100, height: 100))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        color4.setFill()
        ovalPath.fill()
        context.restoreGState()

        color5.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
        
        context.restoreGState()

    }




    @objc(ShapeKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
